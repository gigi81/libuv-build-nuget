variables:
  packageVersion: $(Build.BuildNumber)

resources:
- repo: self
  clean: true

jobs:

# ------- Windows arm ---------------------------------------------------------
- job: windows_arm
  condition: succeeded()
  pool:
    vmImage: 'windows-latest'

  steps:
  - checkout: self
    clean: true
    submodules: true
    
  - task: PowerShell@2
    displayName: 'Fix CMakeLists.txt'
    inputs:
      targetType: inline
      workingDirectory: libuv
      #add shell32 link to tests build becasue of missing symbol
      script: |
       (Get-Content -path 'CMakeLists.txt' -Raw) | %{ $_.Replace('if(WIN32)', "if(CMAKE_GENERATOR_PLATFORM MATCHES `"ARM|ARM64`")`r`n  list(APPEND uv_test_libraries shell32)`r`nendif()`r`n`r`nif(WIN32)") } | Set-Content -Path 'CMakeLists.txt'

  - task: CMake@1
    displayName: 'Cmake arm'
    inputs:
      cmakeArgs: '. -G "Visual Studio 17 2022" -A ARM'
      workingDirectory: libuv

  - task: VSBuild@1
    displayName: 'Build solution libuv.sln arm'
    inputs:
      solution: libuv\libuv.sln
      vsVersion: 17.0
      platform: arm
      configuration: release
      clean: true
      msbuildArgs: /m
      
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'libuv\release\uv.dll'
      artifactName: win-arm
    
# ------- Windows arm64 ---------------------------------------------------------
- job: windows_arm64
  condition: succeeded()
  pool:
    vmImage: 'windows-latest'

  steps:
  - checkout: self
    clean: true
    submodules: true
    
  - task: PowerShell@2
    displayName: 'Fix CMakeLists.txt'
    inputs:
      targetType: inline
      workingDirectory: libuv
      #add shell32 link to tests build becasue of missing symbol
      script: |
       (Get-Content -path 'CMakeLists.txt' -Raw) | %{ $_.Replace('if(WIN32)', "if(CMAKE_GENERATOR_PLATFORM MATCHES `"ARM|ARM64`")`r`n  list(APPEND uv_test_libraries shell32)`r`nendif()`r`n`r`nif(WIN32)") } | Set-Content -Path 'CMakeLists.txt'

  - task: CMake@1
    displayName: 'Cmake arm'
    inputs:
      cmakeArgs: '. -G "Visual Studio 17 2022" -A ARM64'
      workingDirectory: libuv

  - task: VSBuild@1
    displayName: 'Build solution libuv.sln arm'
    inputs:
      solution: libuv\libuv.sln
      vsVersion: 17.0
      platform: arm64
      configuration: release
      clean: true
      msbuildArgs: /m
      
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'libuv\release\uv.dll'
      artifactName: win-arm64
      
# ------- Windows x64 ---------------------------------------------------------
- job: windows_x64
  condition: succeeded()
  pool:
    vmImage: 'windows-latest'

  steps:
  - checkout: self
    clean: true
    submodules: true

  - task: PowerShell@2
    displayName: 'Set build number'
    inputs:
      targetType: inline
      workingDirectory: libuv/include/uv
      script: |
       $v = @{}
       $path = Join-Path (Get-Location) 'version.h'
       foreach($line in Get-Content -Path $path)
       {
           $m = [regex]::Match($line, '#define[\t\s]+([1-9a-zA-Z_]+)[\t\s]+(.*)')
           if($m.Success)
           {
               $v.Add($m.Groups[1].Value, $m.Groups[2].Value.Trim())
           }
       }
       if($v['UV_VERSION_IS_RELEASE'] -ne '1')
       {
           $postfix = '-beta'
       }
       $version = "$($v['UV_VERSION_MAJOR']).$($v['UV_VERSION_MINOR']).$($v['UV_VERSION_PATCH']).$($Env:BUILD_BUILDID)$postfix"
       Write-Host "##vso[build.updatebuildnumber]$version"
       Write-Host "##vso[task.setvariable variable=packageVersion]$version"

  - task: CMake@1
    displayName: 'Cmake x64'
    inputs:
      cmakeArgs: '. -DBUILD_TESTING=ON -G "Visual Studio 17 2022" -A x64'
      workingDirectory: libuv
      
  - task: VSBuild@1
    displayName: 'Build solution libuv.sln x64'
    inputs:
      solution: libuv\libuv.sln
      vsVersion: 17.0
      platform: x64
      configuration: release
      clean: true
      msbuildArgs: /m

  - task: CmdLine@2
    displayName: 'Run tests x64'
    inputs:
      script: 'release\uv_run_tests.exe'
      workingDirectory: libuv

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'libuv\release\uv.dll'
      artifactName: win-x64

# ------- Windows x86 ---------------------------------------------------------
- job: windows_x86
  condition: succeeded()
  pool:
    vmImage: 'windows-latest'

  steps:
  - checkout: self
    clean: true
    submodules: true
    
  - task: CMake@1
    displayName: 'Cmake x86'
    inputs:
      cmakeArgs: '. -DBUILD_TESTING=ON -G "Visual Studio 17 2022" -A Win32'
      workingDirectory: libuv
      
  - task: VSBuild@1
    displayName: 'Build solution libuv.sln x86'
    inputs:
      solution: libuv\libuv.sln
      vsVersion: 17.0
      platform: WIN32
      configuration: release
      clean: true
      msbuildArgs: /m

  - task: CmdLine@2
    displayName: 'Run tests x86'
    inputs:
      script: 'release\uv_run_tests.exe'
      workingDirectory: libuv

  - task: CmdLine@2
    displayName: 'Create contents directory x86'
    inputs:
      script: 'mkdir contents\runtimes\win-x86\native'

  - task: CmdLine@2
    displayName: 'Copy libuv.dll to content directory x86'
    inputs:
      script: 'copy libuv\release\uv.dll contents\runtimes\win-x86\native\libuv.dll'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'libuv\release\uv.dll'
      artifactName: win-x86

# ------- Linux -------------------------------------------------------------
- job: linux_x64
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    clean: true
    submodules: true
    
  - task: CMake@1
    displayName: 'Generate project'
    inputs:
      cmakeArgs: '. -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release'
      workingDirectory: libuv

  - task: CMake@1
    displayName: 'Compile'
    inputs:
      cmakeArgs: '--build . --config Release'
      workingDirectory: libuv

  - task: Bash@3
    displayName: 'Run tests'
    inputs:
      targetType: inline
      script: ./uv_run_tests
      workingDirectory: libuv
      
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'libuv/libuv.so'
      artifactName: linux-x64

# ------- aarch64-linux-gnu --------------------------------------------------
- job: linux_arm64
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-latest'

  container: gigi81/azurecross:aarch64-linux-gnu

  steps:
  - template: arm-steps.yml
    parameters:
      #https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json
      rid: linux-arm64
      qemu: qemu-aarch64

# ------- arm-linux-gnueabihf --------------------------------------------------
- job: linux_arm
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-latest'

  container: gigi81/azurecross:arm-linux-gnueabihf

  steps:
  - template: arm-steps.yml
    parameters:
      #https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json
      rid: linux-arm
      qemu: 'qemu-arm -cpu cortex-a8'

# ------- arm-linux-gnueabi --------------------------------------------------
- job: linux_armel
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-latest'

  container: gigi81/azurecross:arm-linux-gnueabi

  steps:
  - template: arm-steps.yml
    parameters:
      #https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json
      rid: linux-armel
      qemu: 'qemu-arm'

# ------- Darwin -------------------------------------------------------------
- job: osx
  condition: succeeded()
  pool:
    vmImage: macOS-latest
  steps:
  - checkout: self
    clean: true
    submodules: true

  - task: CMake@1
    displayName: 'Generate project'
    inputs:
      cmakeArgs: '. -DBUILD_TESTING=ON -G Xcode -DCMAKE_BUILD_TYPE=Release'
      workingDirectory: libuv

  - task: CMake@1
    displayName: 'Compile'
    inputs:
      cmakeArgs: '--build . --config Release'
      workingDirectory: libuv

  - task: Bash@3
    displayName: 'Run tests'
    inputs:
      targetType: inline
      script: |
       Release/uv_run_tests
       ret=$?
       if test $ret -eq 0
       then
        echo "All test succeeded"
        exit 0
       elif test $ret -le 1
       then
        echo "$ret tests failed, known issues"
        echo "##vso[task.complete result=SucceededWithIssues;]DONE"
        exit 0
       else
        echo "$ret tests failed"
       fi
      workingDirectory: libuv

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'libuv/Release/libuv.dylib'
      artifactName: osx

# ------- Package ---------------------------------------------------------
- job: package
  dependsOn:
  - windows_arm
  - windows_arm64
  - windows_x64
  - windows_x86
  - linux_x64
  - osx
  - linux_arm64
  - linux_arm
  - linux_armel
  condition: succeeded()
  pool:
    name: Hosted
  steps:
  - checkout: self
    clean: true
    submodules: true

  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      downloadType: specific
      downloadPath: runtimes

  - powershell: Get-ChildItem -Path runtimes -File -Recurse | % { Rename-Item -Path $_.PSPath -NewName $_.Name.replace("uv.dll","libuv.dll")}
    displayName: 'Rename uv.dll to libuv.dll'
  
  - task: PowerShell@2
    displayName: 'Update change log'
    inputs:
      targetType: inline
      script: |
       $first = $false
       $changeLog = ""
       $path = Join-Path (Join-Path (Get-Location) 'libuv') 'ChangeLog'
       $nuspec = Join-Path (Get-Location) 'libuv-shared.nuspec'
       
       foreach($line in Get-Content -Path $path)
       {
           if($line -match '\d{4}\.\d{2}\.\d{2}.*')
           {
               if($first) { break; }
               $first = $true
           }
       
           if($first -and ![String]::IsNullOrWhiteSpace($line))
           {
               $changeLog += $line
               $changeLog += [System.Environment]::NewLine
           }
       }
       
       [xml]$xml = Get-Content $nuspec
       $xml.package.metadata.releaseNotes = $changeLog
       $xml.Save($nuspec)
    
  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: '5.0.2' 
    
  - task: NuGetCommand@2
    displayName: 'NuGet pack'
    inputs:
      command: pack
      packagesToPack: libuv-shared.nuspec
      versioningScheme: byEnvVar
      versionEnvVar: packageVersion
      
  - task: NuGetCommand@2
    displayName: 'NuGet push private feed'
    inputs:
      command: push
      publishVstsFeed: '/be2f0cee-544d-407b-b4bf-6dcb58c6e898'

  - task: NuGetCommand@2
    displayName: 'NuGet push nuget.org feed'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: nuget.org