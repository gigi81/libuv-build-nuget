name: 1.0.0$(Rev:.r)
resources:
- repo: self
  clean: true

jobs:

# ------- Windows arm ---------------------------------------------------------
- job: windows_arm
  condition: succeeded()
  pool:
    name: Hosted VS2017
    demands:
    - msbuild
    - visualstudio

  steps:
  - checkout: self
    clean: true
    submodules: true
    
  - task: CMake@1
    displayName: 'Cmake arm'
    inputs:
      cmakeArgs: '. -G "Visual Studio 15 2017" -A ARM'
      workingDirectory: libuv

  - task: VSBuild@1
    displayName: 'Build solution libuv.sln arm'
    inputs:
      solution: libuv\libuv.sln
      vsVersion: 15.0
      platform: arm
      configuration: release
      clean: true
      
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'libuv\release\uv.dll'
      artifactName: win-arm
    
# ------- Windows x64 ---------------------------------------------------------
- job: windows_x64
  condition: succeeded()
  pool:
    name: Hosted VS2017
    demands:
    - msbuild
    - visualstudio

  steps:
  - checkout: self
    clean: true
    submodules: true
    
  - task: CMake@1
    displayName: 'Cmake x64'
    inputs:
      cmakeArgs: '. -DBUILD_TESTING=ON -G "Visual Studio 15 2017" -A x64'
      workingDirectory: libuv
      
  - task: VSBuild@1
    displayName: 'Build solution libuv.sln x64'
    inputs:
      solution: libuv\libuv.sln
      vsVersion: 15.0
      platform: x64
      configuration: release
      clean: true

  - task: CmdLine@2
    displayName: 'Run tests x64'
    inputs:
      script: 'release\uv_run_tests.exe'
      workingDirectory: libuv

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'libuv\release\uv.dll'
      artifactName: win-x64

# ------- Windows x86 ---------------------------------------------------------
- job: windows_x86
  condition: succeeded()
  pool:
    name: Hosted VS2017
    demands:
    - msbuild
    - visualstudio

  steps:
  - checkout: self
    clean: true
    submodules: true
    
  - task: CMake@1
    displayName: 'Cmake x86'
    inputs:
      cmakeArgs: '. -DBUILD_TESTING=ON -G "Visual Studio 15 2017" -A Win32'
      workingDirectory: libuv
      
  - task: VSBuild@1
    displayName: 'Build solution libuv.sln x86'
    inputs:
      solution: libuv\libuv.sln
      vsVersion: 15.0
      platform: WIN32
      configuration: release
      clean: true

  - task: CmdLine@2
    displayName: 'Run tests x86'
    inputs:
      script: 'release\uv_run_tests.exe'
      workingDirectory: libuv

  - task: CmdLine@2
    displayName: 'Create contents directory x86'
    inputs:
      script: 'mkdir contents\runtimes\win-x86\native'

  - task: CmdLine@2
    displayName: 'Copy libuv.dll to content directory x86'
    inputs:
      script: 'copy libuv\release\uv.dll contents\runtimes\win-x86\native\libuv.dll'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'libuv\release\uv.dll'
      artifactName: win-x86

# ------- Linux -------------------------------------------------------------
- job: linux_x64
  condition: succeeded()
  pool:
    name: Hosted Ubuntu 1604
  steps:
  - checkout: self
    clean: true
    submodules: true
    
  - task: CMake@1
    displayName: 'Generate project'
    inputs:
      cmakeArgs: '. -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release'
      workingDirectory: libuv

  - task: CMake@1
    displayName: 'Compile'
    inputs:
      cmakeArgs: '--build . --config Release'
      workingDirectory: libuv

  - task: Bash@3
    displayName: 'Run tests'
    inputs:
      targetType: inline
      script: |
       ls .
       ./uv_run_tests
      workingDirectory: libuv
      
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'libuv/libuv.so'
      artifactName: linux-x64

# ------- Darwin -------------------------------------------------------------
- job: osx
  condition: succeeded()
  pool:
    name: Hosted macOS High Sierra
  steps:
  - checkout: self
    clean: true
    submodules: true

  - task: CMake@1
    displayName: 'Generate project'
    inputs:
      cmakeArgs: '. -DBUILD_TESTING=ON -G Xcode -DCMAKE_BUILD_TYPE=Release'
      workingDirectory: libuv

  - task: CMake@1
    displayName: 'Compile'
    inputs:
      cmakeArgs: '--build . --config Release'
      workingDirectory: libuv

  - task: Bash@3
    displayName: 'Run tests'
    inputs:
      targetType: inline
      script: |
       Release/uv_run_tests
       if test $? -eq 0
       then
        echo "All test succeeded"
        exit 0
       elif test $? -le 2
       then
        echo "$? tests failed, known issues"
        exit 0
       else
        echo "$? tests failed"
       fi
      workingDirectory: libuv

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'libuv/Release/libuv.dylib'
      artifactName: osx

# ------- Package ---------------------------------------------------------
- job: package
  dependsOn:
    - windows_arm
    - windows_x64
    - windows_x86
    - linux_x64
    - osx
  condition: succeeded()
  pool:
    name: Hosted
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      downloadType: specific
      downloadPath: runtimes

  - powershell: Get-ChildItem -Path runtimes -File -Recurse | % { Rename-Item -Path $_.PSPath -NewName $_.Name.replace("uv.dll","libuv.dll")}
    displayName: 'Rename uv.dll to libuv.dll'
  
  - task: NuGetCommand@2
    displayName: 'NuGet pack'
    inputs:
      command: pack
      packagesToPack: libuv-shared.nuspec
      
  - task: NuGetCommand@2
    displayName: 'NuGet push'
    inputs:
      command: push
      publishVstsFeed: '/be2f0cee-544d-407b-b4bf-6dcb58c6e898'
